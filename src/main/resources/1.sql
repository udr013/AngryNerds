CREATE DATABASE  IF NOT EXISTS `xm` /*!40100 DEFAULT CHARACTER SET utf8 */;
USE `xm`;
-- MySQL dump 10.13  Distrib 5.7.9, for Win64 (x86_64)
--
-- Host: localhost    Database: xm
-- ------------------------------------------------------
-- Server version	5.7.11-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `answer`
--

DROP TABLE IF EXISTS `answer`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `answer` (
  `answerid` int(11) NOT NULL AUTO_INCREMENT,
  `correct` int(11) NOT NULL DEFAULT '0',
  `explanation` text,
  `questionid` int(11) DEFAULT NULL,
  `content` text,
  PRIMARY KEY (`answerid`),
  KEY `FK_isvinvqhm350yv1fgumn7x9qc` (`questionid`),
  CONSTRAINT `FK_isvinvqhm350yv1fgumn7x9qc` FOREIGN KEY (`questionid`) REFERENCES `question` (`questionid`)
) ENGINE=InnoDB AUTO_INCREMENT=289 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `answer`
--

LOCK TABLES `answer` WRITE;
/*!40000 ALTER TABLE `answer` DISABLE KEYS */;
INSERT INTO `answer` VALUES (17,0,'Since Truck is a subclass of Automobile, a = t will be valid at compile time as well at runtime. But a cast is needed to make t = (Truck) a; work. This will be ok at compile time but if at run time \'a\' does not refer to an object of class Truck, a ClassCastException will be thrown. Now, method to be executed is decided at run time and it depends on the actual class of object referred to by the variable. Here, at line 4, variable a refers to an object of class Truck. So Truck\'s drive() will be called which prints Truck: drive. This is polymorphism in action!',9,'Compiler error at line 3.'),(18,0,'',9,'Runtime error at line 3.'),(19,0,'',9,'It will print:  Automobile: drive Truck: drive Automobile: drive in that order.'),(20,1,'',9,'It will print: Automobile: drive Truck: drive Truck: drive in that order.'),(21,0,'',9,'It will print: Automobile: drive Automobile: drive Automobile: drive in that order.'),(22,0,'',10,'Good'),(23,0,'',10,'Bad'),(24,0,'',10,'Exception at runtime saying division by Zero.'),(25,1,'You need a boolean in the \'if\' condition. Here, compiler sees that there is no way x/y can produce a boolean so it generates an error at compile time.',10,'It will not compile.'),(26,0,'',10,'None of the above.'),(27,0,'',11,'The code will fail to compile.'),(28,0,'',11,'The program will print str1 and str1.'),(29,0,'',11,'The program will print str1 and str1str2'),(30,1,'str1.concat(str2) actually creates a new object that contains \"str1str2\". So it does not affect the object referenced by str1.',11,'The program will print str1str2 and str1'),(31,0,'Note that String objects are immutable. No matter what operation you do, the original object will remain the same and a new object will be returned. Here, the statement str1.concat(str2) creates a new String object which is printed but its reference is lost after the printing.',11,'The program will print str1str2 and str1str2.'),(32,1,'An enhanced for loop needs either an array or an object of a class that implements java.lang.Iterable. Map does not implement Iterable, though you can use keySet() or values() methods to get a Collection (which extends Iterable) and then iterate over that Collection.',12,'It can iterate over an array or a Collection but not a Map.'),(33,1,'Since there is no explicit condition check written in the code, it provides less opportunity to write code that causes infinite loop. ',12,'Using an enhanced for loop prevents the code from going into an infinite loop.'),(34,0,'',12,'Using an enhanced for loop on an array may cause infinite loop.'),(35,0,'',12,'An enhanced for loop can iterate over a Map.'),(36,1,'Unlike in a regular for loop, there is no iteration variable available in an enhanced for loop, so it is not possible to determine the number of the iteration just by using the enhanced for loop. You will need to do something like:  int i = 0; for(Object obj : collectionOrArray){   System.out.println(\"Iteration number = \"+i+\" Object = \"+obj);   i++; }',12,'You cannot find out the number of the current iteration while iterating.'),(37,0,'It is provided by the compiler if the class does not define any constructor. It is immaterial if the super class provides a constructor or not.',13,'It is provided by the compiler only if the class and any of its super classes does not define any constructor.'),(38,1,'',13,'It takes no arguments.'),(39,0,'A constructor does not return any value at all. It is meant to initialize the state of an object.',13,'A default constructor is used to return a default value.'),(40,0,'',13,'To define a default constructor, you must use the default keyword.'),(41,0,'The access type of a default constructor is same as the access type of the class. Thus, if a class is public, the default constructor will be public.',13,'It is always public.'),(42,0,'There is no restriction on the return type. If the parameters are different then the methods are totally different (other than the name) so their return types can be anything.',14,'An overloading method must have a different parameter list and same return type as that of the overloaded method.'),(43,1,'',14,'If there is another method with the same name but with a different number of arguments in a class then that method can be called as overloaded.'),(44,0,'For overloading a method, the \"signature\" of the overloaded methods must be different. In simple terms, a method signature includes method name and the number and type of arguments that it takes. So if the parameter list of the two methods with the same name are different either in terms of number or in terms of the types of the parameters, then they are overloaded.  For example: Method m1 is overloaded if you have two methods : void m1(int k); and void m1(double d); or if you have: void m1(int k); and void m1(int k, double d);   Note that return type is not considered a part of the method signature.',14,'If there is another method with the same name and same number and type of arguments but with a different return type in a class then that method can be called as overloaded.'),(45,0,'This is called overriding and not overloading.',14,'An overloaded method means a method with the same name and same number and type of arguments exists in the super class and sub class.'),(46,0,'',15,'break;  and //nothing is required'),(47,1,'',15,'continue; and //nothing is required'),(48,1,'This is a very simple loop to follow if you know what break and continue do. break breaks the nearest outer loop. Once a break is encountered, no further iterations of that loop will execute. continue simply starts the next iteration of the loop. Once a continue is encountered, rest of the statements within that loop are ignored (not executed ) and the next iteration is started.',15,'continue; and continue;'),(49,0,'',15,'break; and continue;'),(50,0,'',15,'break; and break'),(51,0,'A default no args one will be provided if not defined any.',16,'All classes must explicitly define a constructor.'),(52,1,'This feature is used for implementing Singleton Classes.',16,'A constructor can be declared private.'),(53,0,'',16,'A constructor can declare a return value.'),(54,0,'All non-final instance variables get default values if not explicitly initialized.',16,'A constructor must initialize all the member variables of a class.'),(55,1,'A constructor is non-static, and so it can access directly both the static and non-static members of the class.',16,'A constructor can access the non-static members of a class.'),(56,0,'It will compile fine.',17,'It will not compile.'),(57,0,'',17,'It will not print anything and will throw NullPointerException'),(58,1,'After printing, when it tries to call calculate() on x, it will throw NullPointerException since x is null.',17,'It will print calculating and then throw NullPointerException.'),(59,0,'',17,'It will print calculating and will throw NoSuchMethodError'),(60,0,'',17,'It will print calculating and will throw MethodNotImplementedException'),(61,0,'',18,'s=aaa sb=bbb'),(62,0,'',18,'s=null sb=null'),(63,0,'',18,'s=aaa sb=null'),(64,0,'',18,'s=null sb=bbbaaa'),(65,1,'Always remember that Strings are immutable, you cannot change them. In this case, s refers to \"aaa\", and no matter what testRefs() method does, the variable s of main() will keep pointing to the same string \"aaa\".  StringBuilder on the other hand, is mutable. So, initially sb is pointing to a StringBuilder object containing \"bbb\". Its reference is passed to the testRefs() method. In that method, we change the local variable str to point to a new string \"aaa\"+\"bbb\" = \"aaabbb\". Then we append this to sb. Therefore sb now contains \"bbbaaabbb\". Setting the local reference str and sb (in method testRefs()) to null, does not affect the variables s and sb of the main() method.',18,'s=aaa sb=bbbaaabbb'),(66,0,'',19,'123446'),(67,0,'',19,'123356'),(68,0,'',19,'1233456'),(69,1,'',19,'123346'),(70,0,'Note that if the src and dest arguments refer to the same array object, then the copying is performed as if the components at positions srcPos through srcPos+length-1 were first copied to a temporary array with length components and then the contents of the temporary array were copied into positions destPos through destPos+length-1 of the destination array.',19,'123336'),(71,0,'Comma is not a valid character here.',20,'double d = 10,000,000.0;'),(72,0,'Dash (-) is not a valid character here.',20,'double d = 10-000-000;'),(73,1,'Beginning with Java 7, you can include underscores in between the digits. This helps in writing long numbers. For example, if you want to write 1 million, you can write: 1_000_000, which is easier than 1000000 for humans to interpret.  Note that you cannot start or end a value with an underscore though. Thus, 100_ or _100 are invalid values. _100 is actually a valid variable name!  You may use underscore for all kinds of numbers including long, double, float, binary, as well as hex.  For example, the following are all valid numbers - int hex = 0xCAFE_BABE; float f = 9898_7878.333_333f; int bin = 0b1111_0000_1100_1100;',20,'double d = 10_000_000;'),(74,0,'',20,'double d = 10 000 000;'),(75,1,'',21,'array2 = array3;'),(76,1,'',21,'array2 = array4;'),(77,0,'',21,'array1 = array2;'),(78,0,'',21,'array4 = array1;'),(79,1,'There is a subtle difference between: int[] i; and int i[]; although in both the cases, i is an array of integers. The difference is if you declare multiple variables in the same statement such as: int[] i, j; and int i[], j;, j is not of the same type in the two cases. In the first case, j is an array of integers while in the second case, j is just an integer. Therefore, in this question: array1 is an array of int array2, array3, array4, and array5  are arrays of int arrays Therefore, option 1, 2 and 5 are valid.',21,'array5 = array3;'),(80,0,'',22,'java.util'),(81,0,'System is not a package. It is a class in java.lang package.',22,'System'),(82,1,'',22,'java.lang'),(83,0,'',22,'java.io'),(84,0,'String is a class in java.lang package.',22,'String'),(85,1,'If there is no package statement in the source file, the class is assumed to be created in a default package that has no name. In this case, all the types created in this default package will be available to this class without any import statement.  However, note that this default package cannot be imported in classes that belong to any other package at all, not even with any sort of import statement. So for example, if you have a class named SomeClass in package test, you cannot access TestClass defined in the problem statement (as it is defined in the default package) at all because there is no way to import it.  As per JLS Section 7.5: A type in an unnamed package has no canonical name, so the requirement for a canonical name in every kind of import declaration implies that (a) types in an unnamed package cannot be imported, and (b) static members of types in an unnamed package cannot be imported. ',22,'The package with no name.'),(86,0,'',23,'The code will fail to compile, because the int[] array declaration is incorrect.'),(87,0,'',23,'The program will compile, but will throw an IndexArrayOutOfBoundsException when run.'),(88,0,'',23,'The program will compile and run without error, and will print nothing.'),(89,0,'Here, all the array elements are initialized to have 0.',23,'The program will compile and run without error and will print null ten times'),(90,1,'It correctly will declare and initialize an array of length 10 containing int values initialized to have 0. ',23,'The program will compile and run without error and will print 0 ten times.'),(91,0,'',24,'0'),(92,0,'',24,'1'),(93,0,'',24,'2'),(94,1,'',24,'3'),(95,0,'',24,'4'),(96,0,'The while loop runs three times for each element in the dataList. So it will print 2 three times. Here is the complete output: x, 0 x, 1 x, 2 y, 0 y, 1 y, 2 z, 0 z, 1 z, 2',24,'It will fail to compile.'),(97,0,'static method sM1() can be shadowed by a static method sM1() in the subclass.',25,'class B will not compile if line 1 is uncommented.'),(98,1,'static method cannot be overridden by a non-static method and vice versa',25,'class B will not compile if line 2 is uncommented.'),(99,1,'',25,'class B will not compile if line 1 and 2 are both uncommented.'),(100,0,'',25,'Only the second option is correct.'),(101,0,'',25,'Only the third option is correct.'),(102,1,'',26,'+'),(103,0,'',26,'++'),(104,1,'',26,'+='),(105,1,'',26,'.'),(106,0,'Only + is overloaded for String. a+=x is actually converted to a = a + x. so it is valid for Strings. dot (.) operator accesses members of the String object. There is only one member variable though: CASE_INSENSITIVE_ORDER. It is of type Comparator (which is an interface).',26,'*'),(107,0,'',27,'0'),(108,0,'',27,'-1'),(109,0,'',27,'255'),(110,0,'',27,'-128'),(111,1,'There no unsigned keyword in java! A char can be used as an unsigned integer.',27,'It will not compile.'),(112,1,'This is quite simple, toString() is called on the Object of class SubClass. Subclass\'s toString() calls super class\'s toString() which returns String 4 (not an integer 4!). It then appends \"3\" to it. So the final value is \"43\".',28,'43'),(113,0,'',28,'7'),(114,0,'',28,'It will not compile.'),(115,0,'',28,'It will throw an exception at runtime.'),(116,0,'',28,'None of the above.'),(117,1,'',29,'String s;'),(118,0,'A string must be enclosed in double quotes \".',29,'String s = \'asdf\';'),(119,1,'Since every class directly or indirectly extends Object class and since Object class has a toString() method, that toString() method will be invoked and the String that it returns will be assigned to s.',29,'String s = this.toString();'),(120,0,'there is no variable asdf defined in the given class.',29,'String s = asdf;'),(121,1,'Note that s2 is a variable of class Sub, which is a subclass of Super. s1 is a variable of class Super. A subclass can ALWAYS be assigned to a super class variable without any cast. It will always compile and run without any exception.  For example, a Dog  \"IS A\" Animal, so you don\'t need to cast it. But an Animal may not always be a Dog. So you need to cast it to make it compile and during the runtime the actual object referenced by animal should be a Dog  otherwise it will throw a ClassCastException.',30,'It will compile and run without any problems.'),(122,0,'',30,'It will compile but WILL throw ClassCastException at runtime.'),(123,0,'',30,'It will compile but MAY throw ClassCastException at runtime.'),(124,0,'',30,'It will not compile.'),(125,0,'',30,'None of the above.'),(126,0,'',31,'1'),(127,0,'',31,'2'),(128,1,'',31,'3'),(129,0,'',31,'4'),(130,0,'',31,'5'),(131,0,'',31,'6'),(132,1,'To call an instance method, you need to use the reference that points to an object of that class. When you call an instance method from another instance method, you don\'t need a reference because \"this\" is implicit.   You can call a static method from either a static or an instance method. No object reference is required. You can call it by using the name of the class or you can omit that as well.  At //3, you are trying to call an instance method from another instance method. Therefore, you need to either specify an object reference or you can rely on this if you omit it. However, you cannot do StaticTest.m3() because StaticTest is not a valid reference that points to an object of class StaticTest.  Same thing happens at //7.',31,'7'),(133,0,'',32,'13432'),(134,1,'Try to follow the flow of control : 1. in method(1) : i is not 2 so, j gets \"1\" then finally is executed which makes j = \"13\" and then the last statement (j +=4) is executed which makes j = \"134\". 2. in method(2) : i is 2, so it goes in the if block which throws an exception. So none of the statements of try block are executed and control goes to catch which makes j = \"1342\", then finally makes j = \"13423\" and the control is returned. Note that the last statement ( j+=4) is not executed as there was an exception thrown in the try block, which cause the control to go to the catch block, which in turn has a return.',32,'13423'),(135,0,'',32,'14324'),(136,0,'',32,'12434'),(137,0,'',32,'12342'),(138,0,'',33,'It will print 1 and 2'),(139,0,'',33,'It will print 1 to N where N is a random number.'),(140,1,'Remember that a labeled break or continue statement must always exist inside the loop where the label is declared. Here, if(j == 4) break POINT1; is a labelled break that is occurring in the second loop while the label POINT1 is declared for the first loop.',33,'It will not compile.'),(141,0,'',33,'It will throw an exception at runtime.'),(142,1,' IllegalArgumentException extends from RuntimeException. So you don\'t have to worry about it at least at compile time. You may or may not declare it in the throws clause. The caller doesn\'t have to catch it anyway. The overriding method in the subclass is free to not throw any checked exception at all even if the overridden method throws a checked exception. No exception is a valid subset of exceptions thrown by the overridden method.',34,'Change doStuff in Amazing to throw only IllegalArgumentException.'),(143,0,'',34,'Change doStuff in Great to throw FileNotFoundException and IllegalArgumentException.'),(144,0,'',34,'Change doStuff in Amazing to throw only IOException.'),(145,1,'',34,'Change doStuff in Great to throw only IOException instead of FileNotFoundException.'),(146,0,'The rule is that an overriding method cannot throw an exception that is a super class of the exception thrown by the overridden method.  Now, FileNotFoundException is a subclass of IOException. Therefore, Amazing\'s doStuff() cannot throw IOException if the base class\'s doStuff throws only FileNotFoundException.  Think of it this way:  FileNotFoundException fne = new IOException(); // Will this work? No, because an IOException is NOT a FileNotFoundException. IOException ioe = new FileNotFoundException(); // Will this work? Yes, because a FileNotFoundException is an IOException.  Therefore, overriding method must not throw an exception that cannot be assigned to a variable whose class is the class of the overridden method\'s exceptio',34,'Replace g.doStuff() to ((Amazing) g).doStuff().'),(147,0,'',35,'Object'),(148,0,'',35,'String'),(149,1,'Note that the return type cannot be a primitive such as int or char. It must be a class. So it can be Integer or Character as well.',35,'Return type can be any class since all objects can be cast to Object.'),(150,0,'',35,'void'),(151,0,'Version 1.5 onwards, Java allows covariant return types, which means that an overriding method can have its return type as any subclass of the return type of the overridden method.  Here, since the return type of the original method is Object, the overriding method can return any object type because all classes in Java ultimately extend from Object.  Note that covariant return types is not applicable to primitives. So for example, if the overridden method returns int, the overriding method\'s return type must also be int. It cannot be short or long. It cannot even be Integer.',35,'None of the above.'),(152,0,'',36,'import static X;'),(153,0,'Bad syntax. com.foo is a package and you cannot import a package statically. You can only import static members of a class statically.',36,'import static com.foo.*;'),(154,1,'This static import is required because of Y is accessing LOGICID directly without its class name ( i.e. X.LOGICID).',36,'import static com.foo.X.*;'),(155,1,'This is required because Y also accesses the class X : X x = new X(); If Y had only one statement, System.out.println(LOGICID); import static com.foo.X.* would suffice.',36,'import com.foo.*;'),(156,0,'Syntax for importing static fields is:  import static <package>.<classname>.*; or import static <package>.<classname>.<fieldname>;',36,'import com.foo.X.LOGICID;'),(157,0,'',37,'34'),(158,0,'',37,'38'),(159,0,'',37,'29'),(160,1,'Multiplication has more precedence than addition. So this will be evaluated as: int a = 1 + 2 + (3 * 4); 3+12 15  int b = 2 * 3 + 4; 6+4 10  So, total = 25',37,'25'),(161,1,'final methods cannot be overridden. That is the purpose of final keyword.',38,'public final void m1()'),(162,1,'',38,'public static void m1()'),(163,1,'Keep in mind that static methods are not overridden, they are shadowed.',38,'public static final void m1()'),(164,0,'',38,'public abstract void m1()'),(165,1,'private methods are not inherited at all so there is no question of overriding a private method.',38,'private void m1()'),(166,0,'No, All the instance variables are initialized by default values.',39,'The program will fail to compile, because of uninitialized variable \'bool\'.'),(167,0,'No reason for this at all.',39,'The program will throw a java.lang.NullPointerException when run.'),(168,1,'',39,'The program will print \"0 null false\".'),(169,0,'All the variables, including the array elements, will be initialized to their default values.',39,'The program will print \"0 null true\".'),(170,0,'All the elements of the arrays of primitives are initialized to default values. ',39,'The program will print null and false but will print junk value for ia[0].'),(171,0,'',40,'0'),(172,0,'',40,'1'),(173,0,'',40,'2'),(174,1,'This is a simple while loop nested inside a for loop. The for loop loops three times - once for each value in values array. Since, values.length is 3, x is incremented two times for each for loop iteration before the condition x<values.length returns false. Therefore, it prints: 0 10 1 10 2 10 0 30 1 30 2 30 0 50 1 50 2 50',40,'3'),(175,0,'You are creating an array of length 7. Since array numbering starts with 0, the first element would be array[0]. So ArrayIndexOutOfBoundsException will NOT be thrown.',41,'Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: 10     at exceptions.TestClass.doTest(TestClass.java:24)     at exceptions.TestClass.main(TestClass.java:14)'),(176,0,'java.lang.ArrayIndexOutOfBoundsException extends java.lang.RuntimeException, which in turn extends java.lang.Exception. Therefore, ArrayIndexOutOfBoundsException is an Exception and not an Error.',41,'Error in thread \"main\" java.lang.ArrayIndexOutOfBoundsException'),(177,1,'',41,'exceptions.MyException: Exception from foo'),(178,0,'me.printStackTrace() would have produced this output.',41,'exceptions.MyException: Exception from foo     at exceptions.TestClass.foo(TestClass.java:29)     at exceptions.TestClass.hello(TestClass.java:25)     at exceptions.TestClass.main(TestClass.java:14)'),(179,0,'',42,'TestClass cannot implement them both because it leads to ambiguity.'),(180,1,'',42,'There is nothing wrong with the code.'),(181,0,'',42,'The code will work fine only if VALUE is removed from one of the interfaces.'),(182,0,'',42,'The code will work fine only if m1() is removed from one of the interfaces.'),(183,0,'',42,'None of the above.'),(184,0,'',43,'The program will fail to compile.'),(185,0,'',43,'The program will throw a NullPointerException when run with zero arguments.'),(186,1,'The word java and class name are not a part of the argument list.',43,'The program will print no arguments when called with zero arguments and 1 arguments  when called with one argument.'),(187,0,'',43,'The program will print no arguments and 2 arguments when called with zero and one arguments.'),(188,0,'When the program is called with no arguments, the args array will be of length zero.',43,'The program will print no arguments and 3 arguments when called with zero and one arguments.'),(189,0,'1.0 is a double. ',44,'float f1 = 1.0;'),(190,0,'43e1 is a double.',44,'float f = 43e1;'),(191,1,'',44,'float f = -1;'),(192,1,'',44,'float f = 0x0123;'),(193,1,'Although 1.0 and 43e1 can fit into a float, the implicit narrowing does not happen because implicit narrowing is permitted only among byte, char, short, and int.',44,'float f = 4;'),(194,0,'',45,'19'),(195,0,'',45,'20'),(196,0,'',45,'21'),(197,0,'',45,'22'),(198,0,'When the first iteration of outer do-while loop starts, var is 20. Now, the inner loop executes till i becomes 21. Now, the condition for outer do-while is checked, while( 22 < 20 ), [i is 22 because of the last i++>var check], thereby making var 19. And as the condition is false, the outer loop also ends. So, 19 is printed.',45,'It will enter an infinite loop.'),(199,0,'',46,'-9'),(200,1,'',46,'-10'),(201,0,'',46,'-11'),(202,0,'You will need to work out the values of the variables at each line on your worksheet to answer such questions. x1 is -4 x2 is (x1)-- => x2 is first assigned the value of x1 i.e. -4 and then x1 in decremented by 1 to become -5 x3  is ++(x2) => x2 becomes -3 first and  then its value i.e. -3 is assigned to x3  x2>x3 is false so x1++  => x1 becomes -4  therefore -4 + -3 + -3 => -10.',46,'-12'),(203,0,'',47,'JVM : IllegalStateException, IllegalArgumentException Application :  ClassCastException, NullPointerException, SecurityException'),(204,0,'',47,'JVM : IllegalStateException, IllegalArgumentException, ClassCastException, Application :   NullPointerException, SecurityException'),(205,0,'',47,'JVM : IllegalStateException, IllegalArgumentException, ClassCastException, NullPointerException Application :  SecurityException'),(206,0,'',47,'JVM : ClassCastException, NullPointerException, SecurityException Application :  IllegalStateException, IllegalArgumentException'),(207,1,'',47,'JVM : ClassCastException, NullPointerException Application :  IllegalStateException, IllegalArgumentException, SecurityException'),(208,0,'',47,'JVM : ClassCastException, NullPointerException, IllegalStateException Application :  IllegalArgumentException, SecurityException'),(209,0,'',48,'catch'),(210,0,'',48,'throws'),(211,0,'',48,'finally'),(212,1,'',48,'catch, finally or both'),(213,0,'A try without resources must have either a catch or a finally. It may have both as well.',48,'throw'),(214,1,'',49,'4 true 6'),(215,0,'',49,'3 true 3'),(216,0,'',49,'3 false 3'),(217,0,'',49,'4 false 6'),(218,0,'',50,'It will not compile because line //1 cannot be parsed correctly.'),(219,0,'it is not',50,'It will not compile because x is used before initialization.'),(220,0,'There is no conflict for resolution of x. The local \'x\' simply shadows the member variable \'x\'.',50,'It will not compile because there is an ambiguous reference to x.'),(221,1,'',50,'It will print 12.'),(222,0,'x is first initialized by x = 3, then the value of this expression (i.e. \"x = 3\"), which is 3, is multiplied by 4 and is again assigned to x. So it prints 12.',50,'It will print 3 .'),(223,0,'',51,'1'),(224,0,'',51,'1 0'),(225,0,'',51,'2 1'),(226,0,'',51,'2 1 0'),(227,0,'',51,'It will keeping printing numbers in an infinite loop.'),(228,1,'In Java, a while or do/while construct takes an expression that returns a boolean. The expression --k is an integer, which is invalid and so the compilation fails.  You could change it to: while( --k>0 ){ ... }. In this case, --k<0 is a boolean expression and is valid.',51,'It will not compile.'),(229,1,'',52,'Replace the method body of m2() with a ; (semi-colon).'),(230,0,'',52,'Replace the ; at the end of m1() with a method body.'),(231,1,'',52,'Remove abstract from m2().'),(232,0,'A method that has a body cannot be abstract. In other words, an abstract method cannot have a body. So either remove the method body (as in m1()) or remove abstract keyword.',52,'Remove abstract from the class declaration.'),(233,0,'Only if you import the whole package containing the class or import the class first.',53,'Base'),(234,0,'package \'com\' does not contain Base.',53,'By importing the package com.* and referring to the class as enthu.Base'),(235,0,'It is perfectly legal.',53,'importing com.* is illegal.'),(236,1,'',53,'By importing com.enthu.* and referring to the class as Base.'),(237,1,'A class or interface can be referred to by using its fully qualified name or its simple name. Using the fully qualified name will always work, but to use the simple name either the class must be in the same package or it has to be imported. By importing com.enthu.* all the classes from the package will be imported and can be referred to using simple names. Importing com.* will not import the subpackage enthu. It will only import the classes in package com.',53,'By referring to the class as com.enthu.Base.'),(238,1,'',54,'111'),(239,0,'',54,'222'),(240,0,'',54,'It will not compile as bA[0] is uninitialized.'),(241,0,'',54,'It will throw an exception at runtime.'),(242,0,'All the arrays are initialized to contain the default values of their type. This means, int[] iA = new int[10]; will contain 10 integers with a value of 0. Object[] oA = new Object[10]; will contain 10 object references pointing to null. boolean[] bA = new boolean[10] will contain 10 booleans of value false. So, as bA[0] is false, the if condition fails and str remains 111.',54,'None of the above.'),(243,0,'',55,'It cannot be accessed from any other class.'),(244,0,'',55,'It can be read but cannot be modified from any other class.'),(245,0,'It can also be modified from any class defined in the same package.',55,'It can be modified but only from a subclass of MyClass.'),(246,1,'',55,'It can be read and modified from any class within the same package or from any subclass of MyClass.'),(247,0,'\"    hello java guru   \" is a valid String and trim() is a valid method in String class.',56,'The line of code will not compile.'),(248,0,'trim() does not remove spaces in within the string but the spaces at the beginning and at the end.',56,'\"hellojavaguru\"'),(249,1,'',56,'\"hello java guru\"'),(250,0,'It returns a string in which both the leading and trailing white space of the original string are removed.',56,'\"hello java guru   \"'),(251,0,'',56,'None of the above'),(252,0,'',57,'obj.destroy();'),(253,0,'Execution of garbage collector doesn\'t make an object eligible for garbage collection. So even if you try to invoke the garbage collector, it will not destroy the object that is not eligible for garbage collection. Also remember that calling System.gc() or Runtime.getRuntime().gc() will not necessarily run the garbage collector. It only requests the JVM to perform garbage collection but there is no guarantee that the JVM will do it.  By the way, System.gc() is equivalent to Runtime.getRuntime().gc().',57,'Runtime.getRuntime().gc();'),(254,1,'This will make the object eligible for GC because there are no other references to it.',57,'obj = null;'),(255,0,'',57,'obj.finalize()'),(256,0,'',58,'Overload the reproduce method in Plant and Animal classes'),(257,0,'',58,'Overload the reproduce method in LivingThing class.'),(258,1,'',58,'Override the reproduce method in Plant and Animal classes'),(259,0,'This kind of scenario where the subclass HAS the behavior of the base class but implements it in a different way is called as overriding. Here, both Plant and Animal reproduce, so they have the behavior of the base class but they do it differently, so you have to override the base class method in their code. Inheritance is always involved in overriding. Overloading is quite different, when you want to do similar (not same) things but the inputs are different then you overload a method. For example, you may have two add methods: add(int i1, int i2) and add(ComplexNo c1, ComplexNo c2). Here both are doing similar things (that is why both are named as add) but inputs are different. Both are two entirely different methods and there is no inheritance involved.',58,'Either overload or override reproduce in Plant and Animal classes, it depends on the preference of the designer.'),(260,1,'',59,'public void method1() throws Throwable'),(261,0,'Note that it should be \'throws\' and not \'throw\'',59,'public void method1() throw Exception'),(262,0,'This is not the right syntax.',59,'public void method1() throw new Exception'),(263,1,'',59,'public void method1() throws Exception'),(264,0,'Non runtime exception must be declared in the throws clause.',59,'public void method1()'),(265,0,'',60,'import java.lang.*;'),(266,0,'',60,'import java.lang.ArrayList;'),(267,1,'',60,'import java.util.ArrayList;'),(268,0,'',60,'import java.collections.ArrayList;'),(269,0,'',60,'No import is necessary.'),(270,0,'You sure can. toString() is defined as public and non-final method in Object class',61,'The class will not compile because you cannot override toString() method.'),(271,0,'static member can be accessed by static and non-static methods both. Non-static can only be accessed by non-static.',61,'The class will not compile as si being static, this.si is not a valid statement.'),(272,0,'It would have been correct if toString() were not overridden. This is the behavior of the toString() provided by Object class.',61,'It will print TestClass@nnnnnnnn, where nnnnnnnn is the hash code of the TestClass object referred to by \'this\'.'),(273,1,'',61,'It will print TestClass.si = 10'),(274,0,'The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@\', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of: getClass().getName() + \'@\' + Integer.toHexString(hashCode())',61,'None of the above.'),(275,0,'Although you can import java.lang package explicitly, it is not required because this package is always imported by the compiler.',62,'import java.lang.*;'),(276,1,'This will make all the classes of java.io package available.',62,'import java.io.*;'),(277,0,'This will only make OutputStreamwriter available. PrintWriter will still be unavailable.',62,'import java.io.OutputStreamWriter;'),(278,0,'include is not valid keyword in Java.',62,'include java.io.*;'),(279,0,'',62,'include java.lang.System;'),(280,1,'Observe that the line  if (value > 4) { and the rest of the code in the for loop will not execute in any case. It is therefore unreachable code and the compiler will complain about i',63,'It will not compile.'),(281,0,'',63,'It will throw an exception at run time.'),(282,0,'',63,'5'),(283,0,'',63,'6'),(284,0,'',63,'7'),(285,0,'',63,'8'),(286,1,'Het eindigt op een vraagteken',64,'Natuurlijk'),(287,0,'vraagteken!',64,'Nee hoor'),(288,0,'Hupsakee',64,'Weet niet / geen mening');
/*!40000 ALTER TABLE `answer` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `category`
--

DROP TABLE IF EXISTS `category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `category` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `chapter` varchar(255) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `questions` tinyblob,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `category`
--

LOCK TABLES `category` WRITE;
/*!40000 ALTER TABLE `category` DISABLE KEYS */;
INSERT INTO `category` VALUES (1,'Chapter 7','Working with Inheritance',NULL),(2,'Chapter 8','Handling Exceptions',NULL),(3,'Chapter 2','Working with Java Data Types',NULL),(4,'Chapter 5','Using Loop Constructs',NULL),(5,'Chapter 6','Constructors',NULL),(6,'Chapter 6','Overloading Methods',NULL),(7,'Chapter 3','Using Operators and Decision Constructs',NULL),(8,'Chapter 4','Creating and Using Arays',NULL),(9,'Chapter 1','Java Basics',NULL),(10,'Hoofdstuk 7a','exceptions',NULL),(11,'Hoofdstuk 7a','exceptions',NULL);
/*!40000 ALTER TABLE `category` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `exam`
--

DROP TABLE IF EXISTS `exam`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `exam` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `is_parallel` bit(1) NOT NULL,
  `max_timeln_minutes` int(11) NOT NULL,
  `number_of_questions` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `exam`
--

LOCK TABLES `exam` WRITE;
/*!40000 ALTER TABLE `exam` DISABLE KEYS */;
/*!40000 ALTER TABLE `exam` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `question`
--

DROP TABLE IF EXISTS `question`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `question` (
  `questionid` int(11) NOT NULL AUTO_INCREMENT,
  `code` text,
  `difficulty` int(11) DEFAULT NULL,
  `feedback` text,
  `has_feedback` int(11) DEFAULT '0',
  `internet_link` varchar(255) DEFAULT NULL,
  `is_marked` int(11) DEFAULT '0',
  `status` int(11) DEFAULT NULL,
  `content` text,
  `categoryid` int(11) DEFAULT NULL,
  PRIMARY KEY (`questionid`),
  KEY `FK_5yvp9bw0ab5dde1a5wqcpxjw6` (`categoryid`),
  CONSTRAINT `FK_5yvp9bw0ab5dde1a5wqcpxjw6` FOREIGN KEY (`categoryid`) REFERENCES `category` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=66 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `question`
--

LOCK TABLES `question` WRITE;
/*!40000 ALTER TABLE `question` DISABLE KEYS */;
INSERT INTO `question` VALUES (9,'class Automobile{\r\n   public void drive() {  System.out.println(\"Automobile: drive\");   }\r\n}\r\n\r\npublic class Truck extends Automobile{\r\n   public void drive() {  System.out.println(\"Truck: drive\");   }\r\n   public static void main (String args [ ]){\r\n      Automobile  a = new Automobile();\r\n      Truck t  = new Truck();\r\n      a.drive(); //1\r\n      t.drive(); //2\r\n      a = t;     //3\r\n      a.drive(); //4\r\n   }\r\n}\r\n\r\n\r\n//End of Code',0,NULL,0,'',0,0,'Given the following classes, what will be the output of compiling and running the class Truck?',1),(10,'public class TestClass{\r\n  public static void main(String[] args){\r\n     int x = 1;\r\n     int y = 0;\r\n     if( x/y ) System.out.println(\"Good\");\r\n     else  System.out.println(\"Bad\");\r\n  }\r\n}',0,NULL,0,'',0,0,'What will the following program print?',2),(11,'class TestClass {\r\n	public static void main(String args[]) {\r\n		String str1 = \"str1\";\r\n		String str2 = \"str2\";\r\n		System.out.println(str1.concat(str2));\r\n		System.out.println(str1);\r\n		\r\n	}\r\n}',0,NULL,0,'',0,0,'What will be the result of attempting to compile and run the following code?',3),(12,'',2,NULL,0,'',0,0,'Which of the following are true about the enhanced for loop?',4),(13,'',2,NULL,0,'',0,0,'Which of the following are true about the \"default\" constructor?',5),(14,'',0,NULL,0,'',0,0,'Which of the following are true regarding overloading of a method?',6),(15,'package algoritmiek;\r\n\r\npublic class FlowTest {\r\n\r\n	static int[] data = { 1, 2, 3, 4, 5 };\r\n\r\n	public static void main(String[] args) {\r\n		for (int i : data) {\r\n			if (i < 2) {\r\n				// insert code1 here             \r\n			}\r\n			System.out.print(i);\r\n			if (i == 3) {\r\n				// insert code2 here\r\n			}\r\n		}\r\n	}\r\n}\r\n',0,NULL,0,'',0,0,'What can be inserted in the following code so that it will print exactly 2345 when compiled and run?',4),(16,'',0,NULL,0,'',0,0,'Which of these statements are true?',5),(17,'abstract class Calculator{\r\n   abstract void calculate();\r\n   public static void main(String[] args){\r\n      System.out.println(\"calculating\");\r\n      Calculator x = null;\r\n      x.calculate();\r\n   }\r\n}',0,NULL,0,'',0,0,'What will the following code print when compiled and run?',2),(18,'public class TestClass{\r\n  public void testRefs(String str, StringBuilder sb){\r\n    str = str + sb.toString();\r\n    sb.append(str);\r\n    str = null;\r\n    sb = null;\r\n  }\r\n  public static void main(String[] args){\r\n    String s = \"aaa\";\r\n    StringBuilder sb = new StringBuilder(\"bbb\");\r\n    new TestClass().testRefs(s, sb);\r\n    System.out.println(\"s=\"+s+\" sb=\"+sb);\r\n  }\r\n}',2,NULL,0,'',0,0,'What will be the output of the following class:',7),(19,'int[] scores = { 1, 2, 3, 4, 5, 6};\r\nSystem.arraycopy(scores, 2, scores, 3, 2);\r\nfor(int i :  scores) System.out.print(i);',2,NULL,0,'',0,0,'What will the following code print?',8),(20,'',0,NULL,0,'',0,0,'Which of the following is/are valid double values for 10 million? (A million has 6 zeros)',3),(21,'int[] array1, array2[];\r\nint[][] array3; \r\nint[] array4[], array5[]; \r\n\r\n\r\nWhich of the following are valid statements?',0,NULL,0,'',0,0,'Consider the following array definitions:',8),(22,'class TestClass {\r\n	public static void main(String[] args) {\r\n		System.out.println(\"hello\");\r\n	}\r\n}',0,NULL,0,'',0,0,'The following are the complete contents of TestClass.java file. Which packages are automatically imported?',9),(23,'class SomeClass {\r\n	public static void main(String args[]) {\r\n		int size = 10;\r\n		int[] arr = new int[size];\r\n		for (int i = 0; i < size; ++i)\r\n			System.out.println(arr[i]);\r\n	}\r\n}',0,NULL,0,'',0,0,'What would be the result of compiling and running the following program?',8),(24,'String[] dataList = {\"x\", \"y\", \"z\"};\r\nfor (String dataElement : dataList) {\r\n	int innerCounter = 0;\r\n	while (innerCounter < dataList.length) {\r\n		System.out.println(dataElement + \", \" + innerCounter);\r\n		innerCounter++;\r\n		}\r\n	}\r\n\r\nHow many times will the output contain 2?',0,NULL,0,'',0,0,'Consider the following code:',4),(25,'class A {\r\n	public static void sM1() {\r\n		System.out.println(\"In base static\");\r\n	}\r\n}\r\n\r\nclass B extends A{\r\n		Line 1 :   // public static void sM1() {  System.out.println(\"In sub static\"); }\r\n		Line 2 :   // public  void sM1() {  System.out.println(\"In sub non-static\"); }\r\n}\r\nWhich of the following statements are true?',0,NULL,0,'',0,0,'Consider the following classes :',1),(26,'',0,NULL,0,'',0,0,'Which of the following operators can be used in conjunction with a String object?',3),(27,'public class TestClass{\r\n  public static void main(String[] args){\r\n    unsigned byte b = 0;\r\n    b--;\r\n    System.out.println(b);\r\n  }\r\n}',0,NULL,0,'',0,0,'What will the following program print?',3),(28,'class Super{\r\n  public String toString(){\r\n     return \"4\";\r\n  }\r\n}\r\npublic class SubClass extends Super{\r\n  public String toString(){\r\n     return super.toString()+\"3\";\r\n  }\r\n  public static void main(String[] args){\r\n    System.out.println( new SubClass() );\r\n  }\r\n}',0,NULL,0,'',0,0,'What will the following program print when run?',1),(29,'public class X{\r\n	//line 1: insert code here.\r\n}',0,NULL,0,'',0,0,'Which of the following are valid at line 1?',9),(30,'class Super {  }\r\nclass Sub extends Super {  }\r\npublic class TestClass{\r\n   public static void main(String[] args){\r\n      Super s1 = new Super(); //1\r\n      Sub s2 = new Sub();     //2\r\n      s1 = (Super) s2;        //3\r\n   }\r\n}\r\nWhich of the following statements are correct?',0,NULL,0,'',0,0,'Consider the following program...',1),(31,'class StaticTest{\r\n    \r\n    void m1(){\r\n        StaticTest.m2();  // 1\r\n        m4();             // 2\r\n        StaticTest.m3();  // 3\r\n    }\r\n    \r\n    static void m2(){ }  // 4\r\n    \r\n    void m3(){\r\n        m1();            // 5\r\n        m2();            // 6\r\n        StaticTest.m1(); // 7\r\n    }\r\n    \r\n    static void m4(){ }\r\n}\r\nWhich of the lines will fail to compile?',0,NULL,0,'',0,0,'Given:',6),(32,'public class Test{\r\n static String j = \"\";\r\n public static void method( int i){\r\n  try{\r\n   if(i == 2){\r\n     throw new Exception();\r\n   }\r\n   j += \"1\";\r\n  }\r\n  catch (Exception e){\r\n   j += \"2\";\r\n   return;\r\n  }\r\n  finally{\r\n   j += \"3\";\r\n  }\r\n  j += \"4\";\r\n }\r\n public static void main(String args[]){\r\n  method(1);\r\n  method(2);\r\n  System.out.println(j);\r\n }\r\n}',0,NULL,0,'',0,0,'What will the following code print when run?',2),(33,'public void method1(int i){\r\n   int j = (i*30 - 2)/100;\r\n   \r\n   POINT1 : for(;j<10; j++){\r\n       boolean flag  = false;\r\n       while(!flag){\r\n	if(Math.random()>0.5) break POINT1;\r\n       }\r\n   }\r\n  while(j>0){\r\n     System.out.println(j--);\r\n     if(j == 4) break POINT1;\r\n   }\r\n}\r\nWhat will it print? (Assume that Math.random() return a double between 0.0 and 1.0, not including 1.0)',0,NULL,0,'',0,0,'Consider the following method which is called with an argument of 7:',4),(34,'import java.io.*;\r\nclass Great {\r\n    public void doStuff() throws FileNotFoundException{\r\n    }    \r\n}\r\n\r\nclass Amazing extends Great { \r\n  public void doStuff() throws IOException, IllegalArgumentException{\r\n  }    \r\n}\r\n\r\npublic class TestClass {\r\n    public static void main(String[] args) throws IOException{\r\n        Great g = new Amazing();\r\n        g.doStuff();\r\n    }\r\n}\r\nAssume that changes suggested in a option are to be applied independent of other options.',2,NULL,0,'',0,0,'How can you fix the following code to make it compile:',1),(35,'public Object  myMethod() {...} \r\n(Select the best option.)',0,NULL,0,'',0,0,'Which of the following is a legal return type of a method overriding the given method',1),(36,'//in file /root/com/foo/X.java\r\npackage com.foo;\r\npublic class X{\r\n  public static int LOGICID = 10;\r\n  public void apply(int i){\r\n    System.out.println(\"applied\");\r\n  }\r\n}\r\n\r\n//in file /root/com/bar/Y.java\r\npackage com.bar;\r\n//1 <== INSERT STATEMENT(s) HERE\r\npublic class Y{\r\n    public static void main(String[] args){\r\n       X x = new X();\r\n       x.apply(LOGICID);\r\n    }\r\n}\r\nWhat should be inserted at //1 so that Y.java can compile without any error?',0,NULL,0,'',0,0,'Consider the following two classes defined in two java source files.',9),(37,' int a = 1 + 2 + 3 * 4; \r\n int b = 2 * 3 + 4;  \r\n int total = a + b;  \r\nWhat will be the value of total?',0,NULL,0,'',0,0,'Given:',7),(38,'',0,NULL,0,'',0,0,'Which of the following method definitions will prevent overriding of that method?',1),(39,'public class Test {\r\n	int[] ia = new int[1];\r\n	Object oA[] = new Object[1];\r\n	boolean bool;\r\n\r\n	public static void main(String args[]) {\r\n		Test test = new Test();\r\n		System.out.println(test.ia[0] + \"  \" + test.oA[0] + \"  \" +\r\n                test.bool);\r\n	}\r\n}',0,NULL,0,'',0,0,'What would be the result of trying to compile and run the following program?',8),(40,'public static void main(String[] args) {\r\n   int[] values = { 10, 30, 50 };\r\n        for( int val : values ){\r\n            int x = 0;\r\n            while(x<values.length){\r\n             System.out.println(x+\" \"+val);\r\n              x++;\r\n            }\r\n        }              \r\n    }\r\nHow many times is 2 printed out in the output?',0,NULL,0,'',0,0,'Consider the following code:',4),(41,'package exceptions;\r\npublic class TestClass{\r\n    public static void main(String[] args) {\r\n        try{\r\n            hello();\r\n        }\r\n        catch(MyException me){\r\n            System.out.println(me);\r\n        }\r\n    }\r\n    \r\n    static void hello() throws MyException{\r\n        int[] dear = new int[7];\r\n        dear[0] = 747;\r\n        foo();\r\n    }\r\n    \r\n    static void foo() throws MyException{\r\n        throw new MyException(\"Exception from foo\");\r\n    }\r\n}\r\n\r\nclass MyException extends Exception {\r\n    public MyException(String msg){\r\n        super(msg);\r\n    }\r\n}\r\n(Assume that line numbers printed in the messages given below are correct.)',2,NULL,0,'',0,0,'What will be the output when the following program is run?',2),(42,'// Filename: TestClass.java\r\nclass TestClass implements T1, T2{\r\n   public void m1(){}\r\n}\r\ninterface T1{\r\n   int VALUE = 1;\r\n   void m1();\r\n}\r\ninterface T2{\r\n   int VALUE = 2;\r\n   void m1();\r\n}',2,NULL,0,'',0,0,'What, if anything, is wrong with the following code?',1),(43,'class SomeClass {\r\n	public static void main(String args[]) {\r\n		if (args.length == 0) {\r\n			System.out.println(\"no arguments\");\r\n		} else {\r\n			System.out.println(args.length + \" arguments\");\r\n		}\r\n	}\r\n}',0,NULL,0,'',0,0,'Given the following program, which statement is true?',9),(44,'',2,NULL,0,'',0,0,'Which of the following declarations are valid?',7),(45,'class Test{\r\n   public static void main(String args[]){\r\n      int var = 20, i=0;\r\n      do{\r\n         while(true){\r\n         if( i++ > var) break;\r\n         }\r\n      }while(i<var--);\r\n      System.out.println(var);\r\n   }\r\n}',2,NULL,0,'',0,0,'What will the following program print?',4),(46,'public class Operators {\r\n	public static int operators() {\r\n		int x1 = -4;\r\n		int x2 = x1--;\r\n		int x3 = ++x2;\r\n		if (x2 > x3) {\r\n			--x3;\r\n		} else {\r\n			x1++;\r\n		}\r\n		return x1 + x2 + x3;\r\n	}\r\n\r\n	public static void main(String[] args) {\r\n		System.out.println(operators());\r\n	}\r\n}',2,NULL,0,'',0,0,'What will the following program print when run?',7),(47,'',2,NULL,0,'',0,0,'Identify the exceptions that are usually thrown by the JVM and the exceptions usually thrown by an application.',2),(48,'',0,NULL,0,'',0,0,'A try statement must always have a ............. associated with it.',2),(49,'int[][] twoD = { { 1, 2, 3} , { 4, 5, 6, 7}, { 8, 9, 10 } };  \r\nWhat will the following lines of code print?  \r\nSystem.out.println(twoD[1].length); System.out.println(twoD[2].getClass().isArray()); \r\nSystem.out.println(twoD[1][2]);',2,NULL,0,'',0,0,'Given the following declaration:',8),(50,'class ScopeTest {\r\n	static int x = 5;\r\n\r\n	public static void main(String[] args) {\r\n		int x = (x = 3) * 4;// 1\r\n		System.out.println(x);\r\n	}\r\n}',2,NULL,0,'',0,0,'What will be the output when the following class is compiled and run?',7),(51,'public class TestClass {\r\n	public static void main(String[] args) {\r\n		int k = 2;\r\n		while (--k) {\r\n			System.out.println(k);\r\n		}\r\n	}\r\n}',0,NULL,0,'',0,0,'What will the following code print when compiled and run:',4),(52,'public abstract class TestClass {\r\n	public abstract void m1();\r\n\r\npublic abstract void m2(){System.out.println(\"hello\");}\r\n}\r\n\r\n Which of the following corrections can be applied to the above code\r\n (independently) so that it compiles without any error?',0,NULL,0,'',0,0,'Consider the following code:',9),(53,'package com.enthu; \r\npublic class Base{    \r\n   // ....    \r\n   // lot of code... \r\n}',0,NULL,0,'',0,0,'Given the following class, which of these are valid ways of referring to the class from outside of the package com.enthu?',9),(54,'public class TestClass {\r\n	public static void main(String[] args) {\r\n		String str = \"111\";\r\n		boolean[] bA = new boolean[1];\r\n		if (bA[0])\r\n			str = \"222\";\r\n		System.out.println(str);\r\n	}\r\n}',0,NULL,0,'',0,0,'What will the following program print?',8),(55,'public class MyClass {\r\n    protected int value = 10;  \r\n}  \r\n\r\nWhich of the following statements are correct regarding the field value?',0,NULL,0,'',0,0,'Consider the following code:',6),(56,'\"    hello java guru   \".trim();',0,NULL,0,'',0,0,'What will the following statement return?',3),(57,'public class Test {\r\n	void test(){\r\n		MyClass obj = new MyClass();\r\n		obj.name = \"jack\";       \r\n		// 1 insert code here  \r\n		}\r\n} \r\n\r\n// In MyClass.java\r\npublic class MyClass{\r\n	int value;\r\n	String name; \r\n}\r\n\r\nWhat can be inserted at // 1, which will make the object referred to by obj eligible for garbage collection?',0,NULL,0,'',0,0,'Consider the following code snippet:',9),(58,'',0,NULL,0,'',0,0,'You are modeling a class hierarchy for living things. You have a class LivingThing which has an abstract method reproduce(). Now, you want to have 2 concrete subclasses of LivingThing - Plant and Animal. Both do reproduce but the mechanisms are different. What would you do?',1),(59,'',0,NULL,0,'',0,0,'Assume that a method named \'method1\' contains code which may raise a non-runtime (checked) Exception. What is/are the possible way(s) to declare this method so that it indicates that it expects the caller to handle that exception?',2),(60,'package x;\r\npublic class TestClass {\r\n    ArrayList<String> al;\r\n    public void init(){\r\n        al = new ArrayList<>();\r\n        al.add(\"Name 1\");\r\n        al.add(\"Name 2\");\r\n    }\r\n    public static void main(String[] args) throws Exception {\r\n        TestClass tc = new TestClass();\r\n        tc.init();\r\n        System.out.println(\"Size = \"+tc.al.size());\r\n    }\r\n}\r\nWhich import statement should be added to make it compile?',1,NULL,0,'',0,0,'Given the complete contents of TestClass.java file:',8),(61,'public class TestClass {\r\n	static int si = 10;\r\n\r\n	public static void main(String args[]) {\r\n		new TestClass();\r\n	}\r\n\r\n	public TestClass() {\r\n		System.out.println(this);\r\n	}\r\n\r\n	public String toString() {\r\n		return \"TestClass.si = \" + this.si;\r\n	}\r\n}',1,NULL,0,'',0,0,'What is the result of compiling and running the following code ?',6),(62,'\r\n//line 1 \r\npublic class TestClass {\r\n	public static void main(String[] args) {\r\n		PrintWriter pw = new PrintWriter(System.out);\r\n		OutputStreamWriter osw = new OutputStreamWriter(System.out);\r\n		pw.print(\"hello\");\r\n	}\r\n}\r\nAssume that PrintWriter and OutputStreamWriter are valid classes in java.io package.',1,NULL,0,'',0,0,'Which of the following lines can be inserted at line 1 to make the program run',9),(63,'public class TestClass {\r\n	public static void main(String[] args) {\r\n		int[] arr = { 1, 2, 3, 4, 5, 6 };\r\n		int counter = 0;\r\n		for (int value : arr) {\r\n			if (counter >= 5) {\r\n				break;\r\n			} else {\r\n				continue;\r\n			}\r\n			if (value > 4) {\r\n				arr[counter] = value + 1;\r\n			}\r\n			counter++;\r\n		}\r\n		System.out.println(arr[counter]);\r\n	}\r\n}',2,NULL,0,'',0,0,'What will the following code print when compiled and run?',4),(64,'Dit is code{\r\n    slechte code;\r\n   }',0,NULL,0,'http://vraaguitleg.nl',0,0,'Is dit een vraag?',9),(65,'ihjbhjbjk',0,NULL,0,'http://ghkj',0,0,'jhkln',1);
/*!40000 ALTER TABLE `question` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `test_results`
--

DROP TABLE IF EXISTS `test_results`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `test_results` (
  `test_result_id` int(11) NOT NULL AUTO_INCREMENT,
  `exam_id` int(11) NOT NULL,
  `userid` int(11) DEFAULT NULL,
  PRIMARY KEY (`test_result_id`),
  KEY `FK_ked4xto8ro6k8ofnxcopydwhw` (`userid`),
  CONSTRAINT `FK_ked4xto8ro6k8ofnxcopydwhw` FOREIGN KEY (`userid`) REFERENCES `users` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=33 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `test_results`
--

LOCK TABLES `test_results` WRITE;
/*!40000 ALTER TABLE `test_results` DISABLE KEYS */;
INSERT INTO `test_results` VALUES (1,1,1),(2,2,1),(3,2,1),(4,2,1),(5,2,1),(6,2,1),(7,2,1),(8,2,1),(9,2,1),(10,0,NULL),(11,0,NULL),(12,1,1),(13,0,NULL),(14,2,1),(15,0,NULL),(16,0,NULL),(17,0,NULL),(18,0,NULL),(19,2,1),(20,0,NULL),(21,1,5),(22,1,5),(23,1,5),(24,1,5),(25,1,5),(26,2,5),(27,1,5),(28,1,5),(29,2,5),(30,1,5),(31,2,5),(32,1,5);
/*!40000 ALTER TABLE `test_results` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `test_results_test_results`
--

DROP TABLE IF EXISTS `test_results_test_results`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `test_results_test_results` (
  `test_results_testResultId` int(11) NOT NULL,
  `test_results` blob,
  `test_results_key` int(11) NOT NULL,
  PRIMARY KEY (`test_results_testResultId`,`test_results_key`),
  CONSTRAINT `FK_h56a8ac18mwt0mx048whxwn82` FOREIGN KEY (`test_results_testResultId`) REFERENCES `test_results` (`test_result_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `test_results_test_results`
--

LOCK TABLES `test_results_test_results` WRITE;
/*!40000 ALTER TABLE `test_results_test_results` DISABLE KEYS */;
INSERT INTO `test_results_test_results` VALUES (1,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',9),(1,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',10),(1,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',11),(1,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0+x',14),(1,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\05x',16),(2,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',10),(2,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0 sq\0~\0\0\0\0!sq\0~\0\0\0\0\"x',12),(2,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0&x',13),(2,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\00sq\0~\0\0\0\01x',15),(2,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\08x',17),(3,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',10),(3,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0 sq\0~\0\0\0\0\"sq\0~\0\0\0\0#x',12),(3,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0&x',13),(3,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0/sq\0~\0\0\0\01x',15),(4,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0!sq\0~\0\0\0\0\"x',12),(5,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',10),(5,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0 sq\0~\0\0\0\0\"sq\0~\0\0\0\0#x',12),(5,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0&x',13),(5,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\00sq\0~\0\0\0\01x',15),(6,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',10),(6,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0!sq\0~\0\0\0\0#sq\0~\0\0\0\0$x',12),(6,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0&x',13),(6,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0/sq\0~\0\0\0\00x',15),(7,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',10),(7,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0 sq\0~\0\0\0\0\"sq\0~\0\0\0\0$x',12),(7,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0\'x',13),(7,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0.sq\0~\0\0\0\0/x',15),(8,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',10),(8,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0!sq\0~\0\0\0\0#sq\0~\0\0\0\0$x',12),(8,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0\'x',13),(9,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',10),(9,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0!sq\0~\0\0\0\0\"sq\0~\0\0\0\0$x',12),(10,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',10),(11,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',10),(12,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',9),(12,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',10),(12,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',11),(12,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0*x',14),(12,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\06sq\0~\0\0\0\07x',16),(13,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',10),(14,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',10),(14,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0 sq\0~\0\0\0\0\"sq\0~\0\0\0\0#x',12),(15,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',10),(16,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',10),(17,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',10),(18,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',9),(18,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',10),(19,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',10),(19,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0 sq\0~\0\0\0\0\"sq\0~\0\0\0\0#x',12),(21,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0sq\0~\0\0\0\0x',9),(22,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',9),(22,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',10),(22,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',11),(23,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',9),(23,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',10),(24,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',9),(24,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',10),(25,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',9),(25,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',10),(26,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',9),(26,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',10),(26,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0 sq\0~\0\0\0\0!sq\0~\0\0\0\0\"x',12),(26,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0&x',13),(26,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0/sq\0~\0\0\0\00x',15),(26,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\08x',17),(27,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',9),(27,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',10),(27,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',11),(27,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0 sq\0~\0\0\0\0\"sq\0~\0\0\0\0#x',12),(27,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0&x',13),(27,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0+x',14),(27,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0.sq\0~\0\0\0\00x',15),(27,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\04x',16),(27,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\08x',17),(28,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',9),(28,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',10),(28,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',11),(28,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0+x',14),(28,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\03sq\0~\0\0\0\04x',16),(29,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',9),(29,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',11),(29,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0 sq\0~\0\0\0\0!sq\0~\0\0\0\0\"x',12),(29,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0+x',14),(29,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\03sq\0~\0\0\0\04x',16),(30,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',11),(30,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0+x',14),(30,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\03sq\0~\0\0\0\04x',16),(31,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',10),(31,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0\"x',12),(31,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0&x',13),(31,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0/sq\0~\0\0\0\00x',15),(31,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\09x',17),(32,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0x',10),(32,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\0,x',14),(32,'�\�\0sr\0java.util.ArrayListx�\��\�a�\0I\0sizexp\0\0\0w\0\0\0sr\0java.lang.Integer⠤���8\0I\0valuexr\0java.lang.Number����\��\0\0xp\0\0\05x',16);
/*!40000 ALTER TABLE `test_results_test_results` ENABLE KEYS */;
UNLOCK TABLES;


DROP TABLE IF EXISTS `test`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `test` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `description` varchar(255) DEFAULT NULL,
  `test_type` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;


LOCK TABLES `test` WRITE;
/*!40000 ALTER TABLE `test` DISABLE KEYS */;
INSERT INTO `test` VALUES (1,'Exam 1','Exam'),(2,'Exam 2','Exam');
/*!40000 ALTER TABLE `test` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `test_content`
--

DROP TABLE IF EXISTS `test_content`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `test_content` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `order_nr` int(11) DEFAULT NULL,
  `question_id` int(11) DEFAULT NULL,
  `test_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FK_8xqjydw02le159pn3e5mpxxgj` (`test_id`),
  CONSTRAINT `FK_8xqjydw02le159pn3e5mpxxgj` FOREIGN KEY (`test_id`) REFERENCES `test` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `test_views_content`
--

LOCK TABLES `test_content` WRITE;
/*!40000 ALTER TABLE `test_content` DISABLE KEYS */;
INSERT INTO `test_content` VALUES (1,1,9,1),(2,2,10,1),(3,1,10,2),(4,3,11,1),(5,2,12,2),(6,3,13,2),(7,4,14,1),(8,4,15,2),(9,5,16,1),(10,5,17,2);
/*!40000 ALTER TABLE `test_content` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2016-06-23 16:47:26
